# -*- coding: utf-8 -*-
"""ml_models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Jjz8zCIYFliOfRi0nLQQgOuuSsOB1y6

**Project 1 group 8**

# **Data Preprocessing Stage**

## **Read data from file**
"""

import os
import codecs
def readfile(filename):
	current_path=os.path.abspath(os.curdir)
	file_path=os.path.join(current_path,filename)
	if not os.path.exists(file_path):
		print("error:file not found:"+filename)
		return ""
	f=codecs.open(file_path,"r","utf-8")
	s=f.read()
	f.close()
	return s
test_data=readfile("test-public.txt")
test_data=test_data.splitlines()
print("length of testing data:"+str(len(test_data)))
train_data=readfile("train.txt")
train_data=train_data.splitlines()
print("length of training data:"+str(len(train_data)))

"""## **preprocessing data**

- training data
"""

min_num=99999
max_num=0
train_list=[]
num_set=set()
i=1
for temp_str in train_data:
  temp=temp_str.split('\t')
  for j in range(1,len(temp)):
    # temp_dict={}
    # temp_dict['Id']=i
    # temp_dict['Source']=temp[0]
    # temp_dict['Sink']=temp[j]
    # train_list.append(temp_dict)
    temp_list=[]
    temp_list.append(int(temp[0]))
    temp_list.append(int(temp[j]))
    train_list.append(temp_list)
    i=i+1
    num_set.add(temp[0])
    num_set.add(temp[1])
    if int(temp[0])<min_num:
      min_num=int(temp[0])
    if int(temp[0])>max_num:
      max_num=int(temp[0]) 
    if int(temp[1])<min_num:
      min_num=int(temp[1])
    if int(temp[1])>max_num:
      max_num=int(temp[1]) 
print("preprocessed training data length:"+str(len(train_list)))

"""**validate original data:**"""

print(train_list[0:20])

"""- add negative data"""

## TODO: ADD NEGATIVE DATA
import random
train_input=[]
train_res=[]
for i in range(0,500000):
  x=random.randint(0,len(train_list))
  train_input.append(train_list[x])
  train_res.append(1)
  # print("generating positive:"+str(i))
i=0
while i<500000:
  x=random.randint(min_num,max_num)
  y=random.randint(min_num,max_num)
  if x!=y and x not in num_set and y not in num_set:
    train_input.append([x,y])
    train_res.append(0)
    # print("generating negative:"+str(i))
    i=i+1
    num_set.add(y)
  else:
    continue
print(len(train_input))
print(len(train_res))

"""**check validity**"""

print(train_input[0:20])
print(train_res[0:20])
print(min_num)
print(max_num)
print(train_input[500000:500020])
print(train_res[500000:500020])

"""- testing data

*remove first line (no data)*
"""

del test_data[0]

test_list=[]

for temp_str in test_data:
  temp=temp_str.split('\t')
  # temp_dict={}
  # temp_dict['Id']=temp[0]
  # temp_dict['Source']=temp[1]
  # temp_dict['Sink']=temp[2]
  # test_list.append(temp_dict)
  temp_list=[]
  temp_list.append(int(temp[1]))
  temp_list.append(int(temp[2]))
  test_list.append(temp_list)
print("preprocessed testing data length:"+str(len(test_list)))

"""**check validity**"""

print(test_list[0:20])

"""- Validatation dataset"""

import random
dev_input=[]
dev_res=[]
for i in range(0,500000):
  x=random.randint(0,len(train_list))
  dev_input.append(train_list[x])
  dev_res.append(1)
  # print("generating positive:"+str(i))
i=0
while i<500000:
  x=random.randint(min_num,max_num)
  y=random.randint(min_num,max_num)
  if x!=y and x not in num_set and y not in num_set:
    dev_input.append([x,y])
    dev_res.append(0)
    # print("generating negative:"+str(i))
    i=i+1
    num_set.add(y)
  else:
    continue
print(len(dev_input))
print(len(dev_res))


