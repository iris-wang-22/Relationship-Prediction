# -*- coding: utf-8 -*-
"""preprocess.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Jjz8zCIYFliOfRi0nLQQgOuuSsOB1y6

**Project 1 group 8**

# **Data Preprocessing Stage**

## **Read data from file**
"""

import os
import codecs
def readfile(filename):
	current_path=os.path.abspath(os.curdir)
	file_path=os.path.join(current_path,filename)
	if not os.path.exists(file_path):
		print("error:file not found:"+filename)
		return ""
	f=codecs.open(file_path,"r","utf-8")
	s=f.read()
	f.close()
	return s
test_data=readfile("test-public.txt")
test_data=test_data.splitlines()
print("length of testing data:"+str(len(test_data)))
train_data=readfile("train.txt")
train_data=train_data.splitlines()
print("length of training data:"+str(len(train_data)))

"""## **preprocessing data**

- training data
"""

train_list=[]
i=1
for temp_str in train_data:
  temp=temp_str.split('\t')
  for j in range(1,len(temp)):
    # temp_dict={}
    # temp_dict['Id']=i
    # temp_dict['Source']=temp[0]
    # temp_dict['Sink']=temp[j]
    # train_list.append(temp_dict)
    temp_list=[]
    temp_list.append(int(temp[0]))
    temp_list.append(int(temp[1]))
    train_list.append(temp_list)
    i=i+1
print("preprocessed training data length:"+str(len(train_list)))

"""**check validity**"""

print(train_list[0:20])

"""- testing data

*remove first line (no data)*
"""

del test_data[0]

test_list=[]

for temp_str in test_data:
  temp=temp_str.split('\t')
  # temp_dict={}
  # temp_dict['Id']=temp[0]
  # temp_dict['Source']=temp[1]
  # temp_dict['Sink']=temp[2]
  # test_list.append(temp_dict)
  temp_list=[]
  temp_list.append(int(temp[1]))
  temp_list.append(int(temp[2]))
  test_list.append(temp_list)
print("preprocessed testing data length:"+str(len(test_list)))

"""**check validity**"""

print(test_list[0:20])

"""# **Build Model, Training and Making Predictions**

## **SVM one class classifier**

- Build model and Training
"""

from sklearn.svm import OneClassSVM
clf = OneClassSVM(gamma='auto')
clf.fit(train_list)

"""- Make predictions"""

res=clf.predict(test_list)
classes=res.tolist()

"""- Validate predicted results"""

print(classes)

"""# References

https://stackoverflow.com/questions/19551858/which-algorithms-to-use-for-one-class-classification

https://stackoverflow.com/questions/33417762/how-to-convert-the-output-of-one-class-svm-to-probability-estimates-using-the-pl

https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html

https://scikit-learn.org/stable/modules/generated/sklearn.svm.OneClassSVM.html#sklearn.svm.OneClassSVM
"""