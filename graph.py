# -*- coding: utf-8 -*-
"""Graph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OF4u9YW6ZnZywbL8ZFonGNVlLd_Q1G-m

## Read data from file
"""

import os
import codecs
def readfile(filename):
	#current_path=os.path.abspath(os.curdir)
	file_path=os.path.join("/content/drive/My Drive/SML_P1",filename)
	if not os.path.exists(file_path):
		print("error:file not found:"+filename)
		return ""
	f=codecs.open(file_path,"r","utf-8")
	s=f.read()
	f.close()
	return s
test_data=readfile("test-public.txt")
test_data=test_data.splitlines()
print("length of testing data:"+str(len(test_data)))
train_data=readfile("train.txt")
train_data=train_data.splitlines()
print("length of training data:"+str(len(train_data)))

"""## preprocessing data"""

## training data

min_num=99999
max_num=0
train_list=[]
num_set=set()
i=1
for temp_str in train_data[0:1]:
  temp=temp_str.split('\t')
  num_set.add(temp[0])
  if int(temp[0])<min_num:
    min_num=int(temp[0])
  if int(temp[0])>max_num:
    max_num=int(temp[0]) 
  for j in range(1,len(temp)):
    temp_list=[]
    temp_list.append(int(temp[0]))
    temp_list.append(int(temp[j]))
    train_list.append(temp_list)
    i=i+1

    num_set.add(temp[j])
    if int(temp[j])<min_num:
      min_num=int(temp[j])
    if int(temp[j])>max_num:
      max_num=int(temp[j]) 
print("preprocessed training data length:"+str(len(train_list)))

print(list(num_set)[0:20])
print(len(list(num_set)))

print(train_list[0:20])

"""## Graph"""

import networkx as nx
G = nx.Graph()

G.add_nodes_from(list(num_set))

G.add_edges_from(train_list)

G.number_of_nodes()

G.number_of_edges()

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

nx.draw(G, with_labels=True)

G.adj