# -*- coding: utf-8 -*-
"""GetFeatures_UndirectedGraph.ipynb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UEJiM01fpa2bvL1-d2mobgvHFlAEnIXC
"""

# -*- coding: utf-8 -*-
import os
import codecs
def readfile(filename):
	#current_path=os.path.abspath(os.curdir)
	file_path=os.path.join("/Users/tree/Desktop/SMLP1/data",filename)
	if not os.path.exists(file_path):
		print("error:file not found:"+filename)
		return ""
	f=codecs.open(file_path,"r","utf-8")
	s=f.read()
	f.close()
	return s
test_data=readfile("test-public.txt")
test_data=test_data.splitlines()
print("length of testing data:"+str(len(test_data)))
train_data=readfile("train.txt")
train_data=train_data.splitlines()
print("length of training data:"+str(len(train_data)))

"""# Graph

## Train data
"""

import numpy as np
positive_train = np.load("/Users/tree/Documents/GitHub/SMLProject/train_data_10k/positive_train.npy").tolist()
negative_train = np.load("/Users/tree/Documents/GitHub/SMLProject/train_data_10k/negative_train.npy").tolist()

print(len(negative_train))

print(positive_train[0:10])

"""## Test data"""

del test_data[0]

test_edges = []
for temp_str in test_data:
  temp = temp_str.split('\t')
  temp_list=[]
  temp_list.append(int(temp[1]))
  temp_list.append(int(temp[2]))
  test_edges.append(temp_list)

print(test_edges[0:10])

"""## Get undirected graph"""

## unsuccessful
import networkx as nx

edge_list = []
import networkx as nx
G = nx.Graph()
for temp_str in train_data:
  temp=temp_str.split('\t')
  for i in range(1, len(temp)):
    temp_edge = (int(temp[0]), int(temp[i]))
    edge_list.append(temp_edge)
G.add_edges_from(edge_list)

##successful
import networkx as nx

G=nx.Graph()
for temp_str in train_data:
  temp=temp_str.split('\t')
  temp_list=[int(i) for i in temp]
  temp_edges=[(temp_list[0], temp_list[i]) for i in range(1, len(temp_list))]
  G.add_edges_from(temp_edges)

print('number of nodes',G.number_of_nodes())
print('number of edges',G.number_of_edges())

import matplotlib.pyplot as plt
nx.draw(SG)

print("Generating community......")
from networkx.algorithms import community

comms = list(community.asyn_fluidc(G,100))
print("Size of communities:"+str(len(comms)))

print("Adding community attribute......")
count=0
for node in G.nodes():
    if(count%100==0):
        print(count)
    count+=1
    for i in range(len(comms)):
        if node in comms[i]:
            G.nodes[node]['community'] = i

"""## features"""

def get_positive_features():
    features = []
    count = 0
    print("Generating positive features......")
    for temp_data in positive_train:
      if (count % 100 == 0):
        print(count)
      count += 1
      feature = []
      try:
        preds = nx.resource_allocation_index(DG, [temp_data])
        for u, v, p in preds:
          feature.append(p)
        
        preds = nx.jaccard_coefficient(DG, [temp_data])
        for u, v, p in preds:
          feature.append(p)
          
#         preds = nx.adamic_adar_index(DG, [temp_data])
#         for u, v, p in preds:
#           feature.append(p)

        # preds = nx.nx.preferential_attachment(G, [temp_data])
        # for u, v, p in preds:
        #   feature.append(p)

        # preds = nx.cn_soundarajan_hopcroft(G, [temp_data])
        # for u, v, p in preds:
        #   feature.append(p)

        # preds = nx.ra_index_soundarajan_hopcroft(G, [temp_data])
        # for u, v, p in preds:
        #   feature.append(p)
        
        # preds = nx.within_inter_cluster(G, [temp_data])
        # for u, v, p in preds:
        #   feature.append(p)          
        
        feature.append(1)  # label=1
        
      except:
        print("one error at: "+str(count))
        pass
      
      features.append(feature)
    print("positive features: "+str(len(features)))
    return features

a = get_positive_features()

#print(a)

def get_negative_features():
    features = []
    count = 0
    print("Generating negative features......")
    for temp_data in negative_train:
      if (count % 100 == 0):
        print(count)
      count += 1
      feature = []
      try:
        preds = nx.resource_allocation_index(DG, [temp_data])
        for u, v, p in preds:
          feature.append(p)
        
        preds = nx.jaccard_coefficient(DG, [temp_data])
        for u, v, p in preds:
          feature.append(p)
          
        preds = nx.adamic_adar_index(DG, [temp_data])
        for u, v, p in preds:
          feature.append(p)

        preds = nx.nx.preferential_attachment(G, [temp_data])
        for u, v, p in preds:
          feature.append(p)

        # preds = nx.cn_soundarajan_hopcroft(G, [temp_data])
        # for u, v, p in preds:
        #   feature.append(p)

        # preds = nx.ra_index_soundarajan_hopcroft(G, [temp_data])
        # for u, v, p in preds:
        #   feature.append(p)
        
        # preds = nx.within_inter_cluster(G, [temp_data])
        # for u, v, p in preds:
        #   feature.append(p)          
        
        feature.append(0)  # label=1
        
      except:
        print("one error at: "+str(count))
        pass
      
      features.append(feature)
    print("negative features: "+str(len(features)))
    return features

def get_test_features():
    features = []
    count = 0
    print("Generating test data features......")
    for temp_data in test_edges:
      if (count % 100 == 0):
        print(count)
      count += 1
      feature = []
      try:
        preds = nx.resource_allocation_index(DG, [temp_data])
        for u, v, p in preds:
          feature.append(p)
        
        preds = nx.jaccard_coefficient(DG, [temp_data])
        for u, v, p in preds:
          feature.append(p)
          
        preds = nx.adamic_adar_index(DG, [temp_data])
        for u, v, p in preds:
          feature.append(p)

        # preds = nx.nx.preferential_attachment(G, [temp_data])
        # for u, v, p in preds:
        #   feature.append(p)

        # preds = nx.cn_soundarajan_hopcroft(G, [temp_data])
        # for u, v, p in preds:
        #   feature.append(p)

        # preds = nx.ra_index_soundarajan_hopcroft(G, [temp_data])
        # for u, v, p in preds:
        #   feature.append(p)
        
        # preds = nx.within_inter_cluster(G, [temp_data])
        # for u, v, p in preds:
        #   feature.append(p)          
        
        
      except:
        print("one error at: "+str(count))
        pass
      
      features.append(feature)
    print("test features: "+str(len(features)))
    return features

"""## Combine"""

#a = get_positive_features()
train_features = get_positive_features() + get_negative_features()

print(train_features[0:10])
print(train_features[50000:50010])

print(len(train_features))

test_features = get_test_features()

print(test_features[0:10])

"""## Save features"""

import csv

with open("train_50k_3F.csv","w",newline="") as csvfile:
  writer=csv.writer(csvfile)
  #writer.writerow(["RA","JC","Label"])
  writer.writerow(["RA","JC","AA","Label"])
  #writer.writerow(["RA","JC","AA","PA","CSH","RSH","WIC","Label"])
  writer.writerows(train_features)

with open("test_50k_3F.csv","w",newline="") as csvfile:
  writer=csv.writer(csvfile)
  #writer.writerow(["RA","JC"])
  writer.writerow(["RA","JC","AA"])
  #writer.writerow(["RA","JC","AA","PA","CSH","RSH","WIC"])
  writer.writerows(test_features)